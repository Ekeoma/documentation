{"packages":[{"classes":[{"implementedInterfaces":[],"methods":{"constructor":[],"static":[],"instance":[{"declarationSignature":"public void onBeforeSync(com.layer.sdk.LayerClient client)","name":"onBeforeSync","callSignature":"onBeforeSync(client)","comment":null,"returns":{"type":"void"},"throws":[],"parameters":[{"name":"client","type":"LayerClient"}],"exceptions":[]},{"declarationSignature":"public void onAfterSync(com.layer.sdk.LayerClient client)","name":"onAfterSync","callSignature":"onAfterSync(client)","comment":null,"returns":{"type":"void"},"throws":[],"parameters":[{"name":"client","type":"LayerClient"}],"exceptions":[]}]},"name":"LayerSyncListener","comment":null,"nestedClasses":[],"fullname":"com.layer.sdk.LayerSyncListener","enumClasses":[],"fields":[],"derivedClasses":[]},{"implementedInterfaces":[],"methods":{"constructor":[],"static":[],"instance":[{"declarationSignature":"public void onAuthenticated(com.layer.sdk.LayerClient client, java.lang.String userId)","name":"onAuthenticated","callSignature":"onAuthenticated(client, userId)","comment":null,"returns":{"type":"void"},"throws":[],"parameters":[{"name":"client","type":"LayerClient"},{"name":"userId","type":"String"}],"exceptions":[]},{"declarationSignature":"public void onDeauthenticated(com.layer.sdk.LayerClient client)","name":"onDeauthenticated","callSignature":"onDeauthenticated(client)","comment":null,"returns":{"type":"void"},"throws":[],"parameters":[{"name":"client","type":"LayerClient"}],"exceptions":[]},{"declarationSignature":"public void onAuthenticationChallenge(com.layer.sdk.LayerClient client, java.lang.String nonce)","name":"onAuthenticationChallenge","callSignature":"onAuthenticationChallenge(client, nonce)","comment":null,"returns":{"type":"void"},"throws":[],"parameters":[{"name":"client","type":"LayerClient"},{"name":"nonce","type":"String"}],"exceptions":[]},{"declarationSignature":"public void onAuthenticationError(com.layer.sdk.LayerClient client, int errorCode, java.lang.String errorMessage)","name":"onAuthenticationError","callSignature":"onAuthenticationError(client, errorCode, errorMessage)","comment":null,"returns":{"type":"void"},"throws":[],"parameters":[{"name":"client","type":"LayerClient"},{"name":"errorCode","type":"int"},{"name":"errorMessage","type":"String"}],"exceptions":[]}]},"name":"LayerAuthenticationListener","comment":null,"nestedClasses":[],"fullname":"com.layer.sdk.LayerAuthenticationListener","enumClasses":[],"fields":[],"derivedClasses":[]},{"implementedInterfaces":[],"methods":{"constructor":[{"declarationSignature":"public LayerChange(com.layer.sdk.LayerChange.Type changeType, com.layer.sdk.LayerObject object, java.lang.String attributeName, java.lang.Object oldValue, java.lang.Object newValue)","name":"LayerChange","callSignature":"LayerChange(changeType, object, attributeName, oldValue, newValue)","comment":null,"throws":[],"parameters":[{"name":"changeType","type":"Type"},{"name":"object","type":"LayerObject"},{"name":"attributeName","type":"String"},{"name":"oldValue","type":"Object"},{"name":"newValue","type":"Object"}],"exceptions":[]}],"static":[],"instance":[{"declarationSignature":"public com.layer.sdk.LayerObject.Type getObjectType()","name":"getObjectType","callSignature":"getObjectType()","comment":"Returns the LayerObject.Type associated with this event.","returns":{"description":"The LayerObject.Type associated with this event.","type":"Type"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public com.layer.sdk.LayerChange.Type getChangeType()","name":"getChangeType","callSignature":"getChangeType()","comment":"Returns the LayerChange.Type associated with this event.","returns":{"description":"The LayerChange.Type associated with this event.","type":"Type"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public com.layer.sdk.LayerObject getObject()","name":"getObject","callSignature":"getObject()","comment":"Returns the object associated with this event (Message or Conversation).","returns":{"description":"The object associated with this event (Message or Conversation).","type":"LayerObject"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public java.lang.String getAttributeName()","name":"getAttributeName","callSignature":"getAttributeName()","comment":"Returns the name of the updated attribute.  Only valid for Type.UPDATE.","returns":{"description":"The name of the updated attribute.","type":"String"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public java.lang.Object getOldValue()","name":"getOldValue","callSignature":"getOldValue()","comment":"Returns the previous value of the changed attribute.  Only valid for Type.UPDATE.","returns":{"description":"The previous value of the changed attribute.","type":"Object"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public java.lang.Object getNewValue()","name":"getNewValue","callSignature":"getNewValue()","comment":"Returns the new value of the changed attribute.  Only valid for Type.UPDATE.","returns":{"description":"The new value of the changed attribute.","type":"Object"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public java.lang.String toString()","name":"toString","callSignature":"toString()","comment":null,"returns":{"type":"String"},"throws":[],"parameters":[],"exceptions":[]}]},"name":"LayerChange","comment":"Changes represent INSERT, UPDATE, and DELETE actions applied to Layer Conversation and Message\nobjects.  INSERT and DELETE types contain a cached object reference to the object that was either\nadded or removed from the Layer persistence.  UPDATE types contain the cached object reference\nalong with a String representation of the attribute that changed, the attribute's old value,\nand the attribute's new value.","nestedClasses":[],"fullname":"com.layer.sdk.LayerChange","enumClasses":[{"implementedInterfaces":[],"methods":{"constructor":[],"static":[],"instance":[]},"name":"Type","comment":null,"nestedClasses":[],"fullname":"com.layer.sdk.LayerChange$Type","enumClasses":[],"fields":[{"name":"INSERT","comment":null,"type":"Type"},{"name":"UPDATE","comment":null,"type":"Type"},{"name":"DELETE","comment":null,"type":"Type"}],"derivedClasses":[]}],"fields":[{"name":"mOldValue","comment":null,"type":"Object"},{"name":"mNewValue","comment":null,"type":"Object"}],"derivedClasses":[{"name":"Change","comment":null,"fullname":"com.layer.sdk.internal.messaging.Change"}]},{"implementedInterfaces":[],"methods":{"constructor":[],"static":[{"declarationSignature":"public static com.layer.sdk.LayerClient newInstance(android.content.Context context, java.lang.String layerAppId, java.lang.String gcmSenderId)","name":"newInstance","callSignature":"newInstance(context, layerAppId, gcmSenderId)","comment":"Generates a new LayerClient, ready for authentication and sending messages.\n\nLayerClient requires the following permissions:\n1. android.permission.ACCESS_NETWORK_STATE - allows the client to determine connectivity.\n2. android.permission.INTERNET - allows the client to access connectivity.","returns":{"description":"a new LayerClient, ready to authenticate.","type":"LayerClient"},"throws":[],"parameters":[{"name":"context","description":"Context in which to create this client.","type":"android.content.Context"},{"name":"layerAppId","description":"Layer-provided `App ID`, from the Layer Console.","type":"String"},{"name":"gcmSenderId","description":"Google Cloud Messaging `Sender ID` for receiving GCM pushes.","type":"String"}],"exceptions":[]}],"instance":[{"declarationSignature":"public abstract java.util.List getConversationIds()","name":"getConversationIds","callSignature":"getConversationIds()","comment":"Returns a list of all Conversation IDs.  Conversation objects can then be loaded by ID with\neither the getConversation(id) or getConversations(ids) methods.  Such a combination can be\nused to implement a lazy loading mechanism, such as an Adapter for a Conversation ListView.\nThe Adapter can be made dynamic by implementing a LayerChangeEventListener interface.","returns":{"description":"a list of all Conversation IDs.","type":"List"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.messaging.Conversation getConversation(android.net.Uri id)","name":"getConversation","callSignature":"getConversation(id)","comment":"Returns the existing Conversation with the given ID, or `null`.","returns":{"description":"the Conversation with the provided ID, or `null` if no such Conversation exists.","type":"Conversation"},"throws":[],"parameters":[{"name":"id","description":"the unique identifier for the Conversation to return.","type":"android.net.Uri"}],"exceptions":[]},{"declarationSignature":"public abstract java.util.List getConversations(java.util.List ids)","name":"getConversations","callSignature":"getConversations(ids)","comment":"Returns a list of Conversations with the given IDs.","returns":{"description":"a list of Conversations with the provided IDs, or an empty list if none are found.","type":"List"},"throws":[],"parameters":[{"name":"ids","description":"the unique identifiers for the Conversations to return.","type":"List"}],"exceptions":[]},{"declarationSignature":"public java.util.List getConversations(android.net.Uri... ids)","name":"getConversations","callSignature":"getConversations(ids)","comment":null,"returns":{"type":"List"},"throws":[],"parameters":[{"name":"ids","type":"android.net.Uri"}],"exceptions":[]},{"declarationSignature":"public abstract java.util.List getConversations()","name":"getConversations","callSignature":"getConversations()","comment":"Returns all stored Conversations.  To preserve memory and enable a more responsive user\nexperience, consider using a combination of getConversationIds() and one of the get-by-ID\nmethods instead.","returns":{"description":"a list of all Conversations.","type":"List"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract java.util.List getConversationsWithParticipants(java.util.List participants)","name":"getConversationsWithParticipants","callSignature":"getConversationsWithParticipants(participants)","comment":"Returns a list of Conversations containing the exact set of participants (and no more).","returns":{"description":"a list of Conversations containing the provided participants, or an empty list if\nnone are found.","type":"List"},"throws":[],"parameters":[{"name":"participants","description":"the list of participants to find Conversations for.","type":"List"}],"exceptions":[]},{"declarationSignature":"public java.util.List getConversationsWithParticipants(java.lang.String... participants)","name":"getConversationsWithParticipants","callSignature":"getConversationsWithParticipants(participants)","comment":null,"returns":{"type":"List"},"throws":[],"parameters":[{"name":"participants","type":"String"}],"exceptions":[]},{"declarationSignature":"public abstract void addParticipants(com.layer.sdk.messaging.Conversation conversation, java.util.List participants)","name":"addParticipants","callSignature":"addParticipants(conversation, participants)","comment":"Adds participants to an existing Conversation.  Participants are user IDs from an external\nserver, for example the identity server used to generate `identity tokens`.\n\nThe addition of a participant can be monitored by registering a LayerChangeEventListener and\nlistening for UPDATE events on a conversation's \"participants\" attribute.","returns":{"type":"void"},"throws":[],"parameters":[{"name":"conversation","description":"the Conversation to add a participant to.","type":"Conversation"},{"name":"participants","description":"the list of participants to add.","type":"List"}],"exceptions":[]},{"declarationSignature":"public void addParticipants(com.layer.sdk.messaging.Conversation conversation, java.lang.String... participants)","name":"addParticipants","callSignature":"addParticipants(conversation, participants)","comment":null,"returns":{"type":"void"},"throws":[],"parameters":[{"name":"conversation","type":"Conversation"},{"name":"participants","type":"String"}],"exceptions":[]},{"declarationSignature":"public abstract void removeParticipants(com.layer.sdk.messaging.Conversation conversation, java.util.List participants)","name":"removeParticipants","callSignature":"removeParticipants(conversation, participants)","comment":"Removes participants from an existing Conversation. Participants are user IDs from an\nexternal server, for example the identity server used to generate `identity tokens`.\n\nThe participant removal can be monitored by registering a LayerChangeEventListener and\nlistening for UPDATE events on a conversation's \"participants\" attribute.","returns":{"type":"void"},"throws":[],"parameters":[{"name":"conversation","description":"the Conversation to remove a participant from.","type":"Conversation"},{"name":"participants","description":"the list of participants to remove.","type":"List"}],"exceptions":[]},{"declarationSignature":"public void removeParticipants(com.layer.sdk.messaging.Conversation conversation, java.lang.String... participants)","name":"removeParticipants","callSignature":"removeParticipants(conversation, participants)","comment":null,"returns":{"type":"void"},"throws":[],"parameters":[{"name":"conversation","type":"Conversation"},{"name":"participants","type":"String"}],"exceptions":[]},{"declarationSignature":"public abstract void deleteConversation(com.layer.sdk.messaging.Conversation conversation)","name":"deleteConversation","callSignature":"deleteConversation(conversation)","comment":"Deletes a Conversation and all associated messages, both on this device and across all\nparticipants in the Conversation.  Any in-memory representations will return `true` for\ntheir isDeleted() method.\n\nThe deletion can be monitored by registering a LayerChangeEventListener and listening for\nDELETE events.","returns":{"type":"void"},"throws":[],"parameters":[{"name":"conversation","description":"the Conversation to delete.","type":"Conversation"}],"exceptions":[]},{"declarationSignature":"public abstract void sendMessage(com.layer.sdk.messaging.Message message)","name":"sendMessage","callSignature":"sendMessage(message)","comment":"Sends a Message to its Conversation, synchronizing the Message among all participants in the\nConversation, as well as all other devices the authenticated user logs in on. Sending a\nmessage queues the message for synchronization with the Layer Cloud.  Message.isSent() allows\nmonitoring of this message's synchronization status.\n\nThe `isSent` transitions can be monitored by registering a LayerChangeEventListener and\nlistening for UPDATE events on the \"isSent\" attribute.","returns":{"type":"void"},"throws":[],"parameters":[{"name":"message","description":"the Message to send.","type":"Message"}],"exceptions":[]},{"declarationSignature":"public abstract java.util.List getMessageIds(com.layer.sdk.messaging.Conversation conversation)","name":"getMessageIds","callSignature":"getMessageIds(conversation)","comment":"Returns an ordered list of IDs for Messages within a given Conversation.  Message objects can\nthen be loaded by ID with either the getMessage(id) or getMessages(ids) methods.  This\nimplements a lazy loading mechanism, useful in applications like an Adapter for a ListView of\na Conversation's Messages.  The Adapter can be made dynamic by implementing a\nLayerChangeEventListener interface and handling INSERT, UPDATE, and DELETE events.  The\nreturned list's order attempts to preserve a natural conversational ordering of Messages,\nallowing this list to directly drive a Conversation's list of Messages in typical chat\napplications.  Ordering is generated using a sequence-based algorithm rather than timestamps.","returns":{"description":"the list of Message IDs within a Conversation, in conversational order.","type":"List"},"throws":[],"parameters":[{"name":"conversation","description":"the Conversation for which to retrieve Message IDs.","type":"Conversation"}],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.messaging.Message getMessage(android.net.Uri id)","name":"getMessage","callSignature":"getMessage(id)","comment":"Returns a Message with the given ID, or `null` if no such Message is found.","returns":{"description":"the Message with the given ID, or `null` if no such Message is found.","type":"Message"},"throws":[],"parameters":[{"name":"id","description":"the unique ID of the Message to return.","type":"android.net.Uri"}],"exceptions":[]},{"declarationSignature":"public abstract java.util.List getMessages(java.util.List ids)","name":"getMessages","callSignature":"getMessages(ids)","comment":"Returns a list of Messages with the given IDs, or an empty list of none are found.","returns":{"description":"a list of Messages with the given IDs, or an empty list of none are found.","type":"List"},"throws":[],"parameters":[{"name":"ids","description":"the unique IDs of the Messages to return, or an empty list if none are found.","type":"List"}],"exceptions":[]},{"declarationSignature":"public java.util.List getMessages(android.net.Uri... ids)","name":"getMessages","callSignature":"getMessages(ids)","comment":null,"returns":{"type":"List"},"throws":[],"parameters":[{"name":"ids","type":"android.net.Uri"}],"exceptions":[]},{"declarationSignature":"public abstract java.util.List getMessages(com.layer.sdk.messaging.Conversation conversation)","name":"getMessages","callSignature":"getMessages(conversation)","comment":"Returns an ordered list of Messages within a given Conversation, in conversational order.\nTo preserve memory and enable a more responsive user experience, consider using a combination\nof getConversationIds() and one of the get-by-ID methods instead.","returns":{"description":"an ordered list of all Messages in the given Conversation.","type":"List"},"throws":[],"parameters":[{"name":"conversation","description":"the Conversation for which to retrieve Message IDs.","type":"Conversation"}],"exceptions":[]},{"declarationSignature":"public abstract void deleteMessage(com.layer.sdk.messaging.Message message)","name":"deleteMessage","callSignature":"deleteMessage(message)","comment":"Deletes a Message, both on this device and across all participants in the Conversation.  Any\nin-memory representations of the Message will now return `true` on Message.isDeleted().\n\nMessage deletion can be monitored by registering a LayerChangeEventListener and listening for\nMessage DELETE events.","returns":{"type":"void"},"throws":[],"parameters":[{"name":"message","description":"the Message to send. to delete.","type":"Message"}],"exceptions":[]},{"declarationSignature":"public abstract void setMetadata(com.layer.sdk.messaging.Message message, java.util.Map metadata)","name":"setMetadata","callSignature":"setMetadata(message, metadata)","comment":null,"returns":{"type":"void"},"throws":[],"parameters":[{"name":"message","type":"Message"},{"name":"metadata","type":"Map"}],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.LayerClient registerEventListener(com.layer.sdk.LayerChangeEventListener listener)","name":"registerEventListener","callSignature":"registerEventListener(listener)","comment":"Registers a LayerChangeEventListener for observing change events.  Change events are emitted\nfor insertion, update, and deletion of Conversation and Message objects.  This allows a\nlistener to dynamically synchronize UI elements in the main thread or an external search\nindex in a background thread, for example.  Each emitted event contains a reference to the\ntarget object.  Updates also contain the updated attribute, along with its old and new value.","returns":{"description":"this LayerClient.","type":"LayerClient"},"throws":[],"parameters":[{"name":"listener","description":"the LayerChangeEventListener to register.","type":"LayerChangeEventListener"}],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.LayerClient unregisterEventListener(com.layer.sdk.LayerChangeEventListener listener)","name":"unregisterEventListener","callSignature":"unregisterEventListener(listener)","comment":"Stops a LayerChangeEventListener from listening for change events.","returns":{"description":"this LayerClient.","type":"LayerClient"},"throws":[],"parameters":[{"name":"listener","description":"the LayerChangeEventListener to unregister.","type":"LayerChangeEventListener"}],"exceptions":[]},{"declarationSignature":"public abstract java.lang.String getAuthenticatedUserId()","name":"getAuthenticatedUserId","callSignature":"getAuthenticatedUserId()","comment":"","returns":{"description":"the ID for the current authenticated user, or `null` if not authenticated with Layer.","type":"String"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.LayerClient authenticate()","name":"authenticate","callSignature":"authenticate()","comment":"Tells the client to begin authenticating with current credentials, if they exist.  If no\ncredentials exist, or the credentials are no longer valid, Layer will respond with a `nonce`\nchallenge provided to the LayerAuthenticationListener.onAuthenticationChallenge() listener\nmethod. Respond to the challenge with LayerClient.answerAuthenticationChallenge(), providing\nyour externally-generated `identity token` (see the getting started guide).  You must have\nconnected with a call to connect() prior to authenticating.","returns":{"type":"LayerClient"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.LayerClient deauthenticate()","name":"deauthenticate","callSignature":"deauthenticate()","comment":"Tells the client to drop all credentials and deauthenticate its session.","returns":{"type":"LayerClient"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract void answerAuthenticationChallenge(java.lang.String identityToken)","name":"answerAuthenticationChallenge","callSignature":"answerAuthenticationChallenge(identityToken)","comment":"Responds to a challenge from LayerAuthenticationListener.onAuthenticationChallenge().\nChallenges may come at other times besides the authentication process initialized by a call\nto `authenticate()`.  You must be ready to generate `identity tokens` in the background -\nvia an authenticated session with your backend or similar - to maintain an uninterrupted user\nexperience.","returns":{"type":"void"},"throws":[],"parameters":[{"name":"identityToken","type":"String"}],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.LayerClient registerAuthenticationListener(com.layer.sdk.LayerAuthenticationListener listener)","name":"registerAuthenticationListener","callSignature":"registerAuthenticationListener(listener)","comment":"Registers a LayerAuthenticationListener for observing authentication callbacks.\nAuthentication callbacks allow a listener to monitor authentication state and to respond to\nauthentication challenges.  This listener is required to complete authentication: the `nonce`\nprovided in onAuthenticationChallenge() must be used to generate the challenge's response, in\nthe form of an `identity token` provided to the LayerClient.answerAuthenticationChallenge()\nmethod.","returns":{"description":"this LayerClient.","type":"LayerClient"},"throws":[],"parameters":[{"name":"listener","description":"the LayerAuthenticationListener to register.","type":"LayerAuthenticationListener"}],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.LayerClient unregisterAuthenticationListener(com.layer.sdk.LayerAuthenticationListener listener)","name":"unregisterAuthenticationListener","callSignature":"unregisterAuthenticationListener(listener)","comment":"Stops a LayerAuthenticationListener from observing authentication events.","returns":{"description":"this LayerClient.","type":"LayerClient"},"throws":[],"parameters":[{"name":"listener","description":"the LayerAuthenticationListener to unregister.","type":"LayerAuthenticationListener"}],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.LayerClient connect()","name":"connect","callSignature":"connect()","comment":"Tells the client to connect to Layer, resuming a prior session, if it exists.  A prior\nsession exists if a call to getAuthenticatedUserId() returns a non-null value.  If no session\nexists, or the session is no longer valid, the caller must start the authentication process\nwith a call to authenticate().","returns":{"type":"LayerClient"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.LayerClient disconnect()","name":"disconnect","callSignature":"disconnect()","comment":"Tells the client to disconnect all network connections with Layer.","returns":{"type":"LayerClient"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.LayerClient registerConnectionListener(com.layer.sdk.LayerConnectionListener listener)","name":"registerConnectionListener","callSignature":"registerConnectionListener(listener)","comment":"Registers a LayerConnectionListener for observing connection callbacks.  Connection callbacks\nallow a listener to monitor connection state with the Layer Cloud.","returns":{"description":"this LayerClient.","type":"LayerClient"},"throws":[],"parameters":[{"name":"listener","description":"the LayerConnectionListener to register.","type":"LayerConnectionListener"}],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.LayerClient unregisterConnectionListener(com.layer.sdk.LayerConnectionListener listener)","name":"unregisterConnectionListener","callSignature":"unregisterConnectionListener(listener)","comment":"Stops a LayerConnectionListener from observing connection events.","returns":{"description":"this LayerClient.","type":"LayerClient"},"throws":[],"parameters":[{"name":"listener","description":"the LayerConnectionListener to unregister.","type":"LayerConnectionListener"}],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.LayerClient registerSyncListener(com.layer.sdk.LayerSyncListener listener)","name":"registerSyncListener","callSignature":"registerSyncListener(listener)","comment":"Registers a LayerSyncListener for observing sync callbacks.  Sync callbacks let a listener\nmonitor the onset and completion of synchronization with the Layer Cloud.","returns":{"description":"this LayerClient.","type":"LayerClient"},"throws":[],"parameters":[{"name":"listener","description":"the LayerSyncListener to register.","type":"LayerSyncListener"}],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.LayerClient unregisterSyncListener(com.layer.sdk.LayerSyncListener listener)","name":"unregisterSyncListener","callSignature":"unregisterSyncListener(listener)","comment":"Stops a LayerSyncListener from observing sync events.","returns":{"description":"this LayerClient.","type":"LayerClient"},"throws":[],"parameters":[{"name":"listener","description":"the LayerSyncListener to unregister.","type":"LayerSyncListener"}],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.LayerClient setGcmSenderId(java.lang.String senderId)","name":"setGcmSenderId","callSignature":"setGcmSenderId(senderId)","comment":"Sets the Google Cloud Messaging `Sender ID` for this client.","returns":{"description":"this LayerClient.","type":"LayerClient"},"throws":[],"parameters":[{"name":"senderId","type":"String"}],"exceptions":[]},{"declarationSignature":"public abstract void setNotificationCallback(com.layer.sdk.LayerClient.LayerNotificationCallback callback)","name":"setNotificationCallback","callSignature":"setNotificationCallback(callback)","comment":"Sets the LayerNotificationCallback to call when the LayerClient receives a notifications.","returns":{"type":"void"},"throws":[],"parameters":[{"name":"callback","type":"LayerNotificationCallback"}],"exceptions":[]},{"declarationSignature":"public abstract java.lang.String getAppId()","name":"getAppId","callSignature":"getAppId()","comment":"Returns this client's Layer `App ID`.","returns":{"description":"the Layer `App ID`.","type":"String"},"throws":[],"parameters":[],"exceptions":[]}]},"name":"LayerClient","comment":null,"nestedClasses":[{"implementedInterfaces":[],"methods":{"constructor":[],"static":[],"instance":[{"declarationSignature":"public void onLayerNotification(com.layer.sdk.LayerClient client, java.lang.String message)","name":"onLayerNotification","callSignature":"onLayerNotification(client, message)","comment":null,"returns":{"type":"void"},"throws":[],"parameters":[{"name":"client","type":"LayerClient"},{"name":"message","type":"String"}],"exceptions":[]}]},"name":"LayerNotificationCallback","comment":"Callback for receiving and handling notifications.  Implementations should generate intents\nand UI necessary to display notifications.","nestedClasses":[],"fullname":"com.layer.sdk.LayerClient$LayerNotificationCallback","enumClasses":[],"fields":[],"derivedClasses":[]}],"fullname":"com.layer.sdk.LayerClient","enumClasses":[],"fields":[],"derivedClasses":[{"name":"LayerClientImpl","comment":"Design Philosophy:\n(1) All Messaging-related tasks take place in AsyncTasks to keep networking off the main thread.\n(2) SyncOps do not need special handling because they have their own thread pool.\n(3) All public alerts happen through a Handler attacked to the UI thread to ease UI integration.","fullname":"com.layer.sdk.internal.LayerClientImpl"}]},{"implementedInterfaces":[],"methods":{"constructor":[],"static":[],"instance":[{"declarationSignature":"public void onConnectionConnected(com.layer.sdk.LayerClient client)","name":"onConnectionConnected","callSignature":"onConnectionConnected(client)","comment":null,"returns":{"type":"void"},"throws":[],"parameters":[{"name":"client","type":"LayerClient"}],"exceptions":[]},{"declarationSignature":"public void onConnectionDisconnected(com.layer.sdk.LayerClient client)","name":"onConnectionDisconnected","callSignature":"onConnectionDisconnected(client)","comment":null,"returns":{"type":"void"},"throws":[],"parameters":[{"name":"client","type":"LayerClient"}],"exceptions":[]},{"declarationSignature":"public void onConnectionError(com.layer.sdk.LayerClient client, int errorCode, java.lang.String errorMessage)","name":"onConnectionError","callSignature":"onConnectionError(client, errorCode, errorMessage)","comment":null,"returns":{"type":"void"},"throws":[],"parameters":[{"name":"client","type":"LayerClient"},{"name":"errorCode","type":"int"},{"name":"errorMessage","type":"String"}],"exceptions":[]}]},"name":"LayerConnectionListener","comment":null,"nestedClasses":[],"fullname":"com.layer.sdk.LayerConnectionListener","enumClasses":[],"fields":[],"derivedClasses":[]},{"implementedInterfaces":[],"methods":{"constructor":[{"declarationSignature":"public LayerChangeEvent(com.layer.sdk.LayerClient client, java.util.List changes)","name":"LayerChangeEvent","callSignature":"LayerChangeEvent(client, changes)","comment":null,"throws":[],"parameters":[{"name":"client","type":"LayerClient"},{"name":"changes","type":"List"}],"exceptions":[]}],"static":[],"instance":[{"declarationSignature":"public com.layer.sdk.LayerClient getClient()","name":"getClient","callSignature":"getClient()","comment":"Returns the LayerClient that generated this LayerChangeEvent.","returns":{"description":"The LayerClient that generated this LayerChangeEvent","type":"LayerClient"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public java.util.List getChanges()","name":"getChanges","callSignature":"getChanges()","comment":"Returns the list of Changes represented by this LayerChangeEvent.","returns":{"description":"The list of Changes represented by this LayerChangeEvent","type":"List"},"throws":[],"parameters":[],"exceptions":[]}]},"name":"LayerChangeEvent","comment":"A LayerChangeEvent represents a list of Changes during foreground public API usage or background\nsynchronization.  These Changes can be used to synchronize UI state or an index within external\nstorage with dynamic Layer Conversation and Message object mutations.","nestedClasses":[],"fullname":"com.layer.sdk.LayerChangeEvent","enumClasses":[],"fields":[],"derivedClasses":[]},{"implementedInterfaces":[],"methods":{"constructor":[],"static":[],"instance":[]},"name":"LayerObject","comment":null,"nestedClasses":[],"fullname":"com.layer.sdk.LayerObject","enumClasses":[{"implementedInterfaces":[],"methods":{"constructor":[],"static":[{"declarationSignature":"public static com.layer.sdk.LayerObject.Type fromObject(com.layer.sdk.LayerObject object)","name":"fromObject","callSignature":"fromObject(object)","comment":null,"returns":{"type":"Type"},"throws":[],"parameters":[{"name":"object","type":"LayerObject"}],"exceptions":[]}],"instance":[]},"name":"Type","comment":null,"nestedClasses":[],"fullname":"com.layer.sdk.LayerObject$Type","enumClasses":[],"fields":[{"name":"CONVERSATION","comment":null,"type":"Type"},{"name":"MESSAGE","comment":null,"type":"Type"}],"derivedClasses":[]}],"fields":[],"derivedClasses":[{"name":"Message","comment":"The `Message` class represents a message within a conversation (modeled by the `Conversation`\nclass) between two or more participants within Layer.","fullname":"com.layer.sdk.messaging.Message"},{"name":"ConversationImpl","comment":null,"fullname":"com.layer.sdk.internal.messaging.models.ConversationImpl"},{"name":"MessageImpl","comment":null,"fullname":"com.layer.sdk.internal.messaging.models.MessageImpl"},{"name":"Conversation","comment":"The `Conversation` class models a conversations between two or more participants within Layer. A\nconversation is an on-going stream of messages (modeled by the `Message` class) synchronized\namong all participants.","fullname":"com.layer.sdk.messaging.Conversation"},{"name":"Changeable","comment":"The Changeable interface lets LayerClient track and alert object mutations that must get\npropagated through the public API.  It is these changes which allow developers to synchronize\ntheir UI and data store with the internal representation within SyncPersistence.","fullname":"com.layer.sdk.internal.messaging.Changeable"}]},{"implementedInterfaces":[],"methods":{"constructor":[],"static":[],"instance":[]},"name":"LayerChangeEventListener","comment":null,"nestedClasses":[{"implementedInterfaces":[{"name":"LayerChangeEventListener","comment":null,"fullname":"com.layer.sdk.LayerChangeEventListener"}],"methods":{"constructor":[],"static":[],"instance":[{"declarationSignature":"public void onEventAsync(com.layer.sdk.LayerChangeEvent event)","name":"onEventAsync","callSignature":"onEventAsync(event)","comment":null,"returns":{"type":"void"},"throws":[],"parameters":[{"name":"event","type":"LayerChangeEvent"}],"exceptions":[]}]},"name":"BackgroundThread","comment":null,"nestedClasses":[],"fullname":"com.layer.sdk.LayerChangeEventListener$BackgroundThread","enumClasses":[],"fields":[],"derivedClasses":[]},{"implementedInterfaces":[{"name":"LayerChangeEventListener","comment":null,"fullname":"com.layer.sdk.LayerChangeEventListener"}],"methods":{"constructor":[],"static":[],"instance":[{"declarationSignature":"public void onEventMainThread(com.layer.sdk.LayerChangeEvent event)","name":"onEventMainThread","callSignature":"onEventMainThread(event)","comment":null,"returns":{"type":"void"},"throws":[],"parameters":[{"name":"event","type":"LayerChangeEvent"}],"exceptions":[]}]},"name":"MainThread","comment":null,"nestedClasses":[],"fullname":"com.layer.sdk.LayerChangeEventListener$MainThread","enumClasses":[],"fields":[],"derivedClasses":[]}],"fullname":"com.layer.sdk.LayerChangeEventListener","enumClasses":[],"fields":[],"derivedClasses":[{"name":"BackgroundThread","comment":null,"fullname":"com.layer.sdk.LayerChangeEventListener$BackgroundThread"},{"name":"MainThread","comment":null,"fullname":"com.layer.sdk.LayerChangeEventListener$MainThread"}]}],"name":"com.layer.sdk"},{"classes":[{"implementedInterfaces":[],"methods":{"constructor":[{"declarationSignature":"public PersistenceClosedException(java.lang.String detailMessage)","name":"PersistenceClosedException","callSignature":"PersistenceClosedException(detailMessage)","comment":null,"throws":[],"parameters":[{"name":"detailMessage","type":"String"}],"exceptions":[]}],"static":[],"instance":[]},"name":"PersistenceClosedException","comment":null,"nestedClasses":[],"fullname":"com.layer.sdk.exceptions.PersistenceClosedException","enumClasses":[],"fields":[],"derivedClasses":[]},{"implementedInterfaces":[],"methods":{"constructor":[{"declarationSignature":"public NotAuthenticatedException(java.lang.String detailMessage)","name":"NotAuthenticatedException","callSignature":"NotAuthenticatedException(detailMessage)","comment":null,"throws":[],"parameters":[{"name":"detailMessage","type":"String"}],"exceptions":[]}],"static":[],"instance":[]},"name":"NotAuthenticatedException","comment":null,"nestedClasses":[],"fullname":"com.layer.sdk.exceptions.NotAuthenticatedException","enumClasses":[],"fields":[],"derivedClasses":[]}],"name":"com.layer.sdk.exceptions"},{"classes":[{"implementedInterfaces":[{"name":"LayerObject","comment":null,"fullname":"com.layer.sdk.LayerObject"}],"methods":{"constructor":[],"static":[{"declarationSignature":"public static com.layer.sdk.messaging.Conversation newInstance(java.util.List participants)","name":"newInstance","callSignature":"newInstance(participants)","comment":"Constructs a new Conversation with the provided participants.","returns":{"description":"a Conversation ready for messages.","type":"Conversation"},"throws":[],"parameters":[{"name":"participants","description":"List of participants to include in this Conversation.","type":"List"}],"exceptions":[]},{"declarationSignature":"public static com.layer.sdk.messaging.Conversation newInstance(java.lang.String... participants)","name":"newInstance","callSignature":"newInstance(participants)","comment":null,"returns":{"type":"Conversation"},"throws":[],"parameters":[{"name":"participants","type":"String"}],"exceptions":[]}],"instance":[{"declarationSignature":"public abstract android.net.Uri getId()","name":"getId","callSignature":"getId()","comment":"A unique identifier for this Conversation.  The identifier can change between a\nlocally-generated, temporary value and a globally-generated, permanent value.  Observers\n(using LayerChangeEventListener) must listen for the \"id\" update to capture such identifier\nmigrations.","returns":{"description":"a unique identifier for this Conversation.","type":"android.net.Uri"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract java.util.List getParticipants()","name":"getParticipants","callSignature":"getParticipants()","comment":"Returns the set of user identifiers specifying who is participating in the conversation\nmodeled by the receiver.  Layer conversations are addressed using user identifiers of the\nhost application.\n\nLayerChangeEventListeners can capture participant addition and removal from a conversation\nby listening for update events on the \"participants\" attribute.","returns":{"type":"List"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.messaging.Message getLastMessage()","name":"getLastMessage","callSignature":"getLastMessage()","comment":"The last message in this Conversation.","returns":{"description":"the last message in this Conversation.","type":"Message"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract boolean isDeleted()","name":"isDeleted","callSignature":"isDeleted()","comment":"A conversation is considered `deleted` after LayerClient.deleteConversation() has been called\non it.  This will only appear on in-memory instances of a Conversation after it has been\ndeleted, either locally or remotely.  An attempt to load the conversation by ID will result\nin `null` because it no longer exists. A registered LayerChangeEventListener can capture\nthe transition to isDeleted by monitoring for updates on the \"isDeleted\" attribute.  The\ndeletion of the conversation also results in a DELETE event.","returns":{"description":"true if the Conversation is deleted; false otherwise.","type":"boolean"},"throws":[],"parameters":[],"exceptions":[]}]},"name":"Conversation","comment":"The `Conversation` class models a conversations between two or more participants within Layer. A\nconversation is an on-going stream of messages (modeled by the `Message` class) synchronized\namong all participants.","nestedClasses":[],"fullname":"com.layer.sdk.messaging.Conversation","enumClasses":[],"fields":[],"derivedClasses":[{"name":"ConversationImpl","comment":null,"fullname":"com.layer.sdk.internal.messaging.models.ConversationImpl"}]},{"implementedInterfaces":[],"methods":{"constructor":[],"static":[{"declarationSignature":"public static com.layer.sdk.messaging.MessagePart newInstance(java.lang.String mimeType, byte[] data)","name":"newInstance","callSignature":"newInstance(mimeType, data)","comment":"Creates a MessagePart with the given MIME type and data.","returns":{"type":"MessagePart"},"throws":[],"parameters":[{"name":"mimeType","description":"A MIME type identifying the type of data contained in the given data object.","type":"String"},{"name":"data","description":"The data to be embedded in the MessagePart.","type":"byte"}],"exceptions":[]},{"declarationSignature":"public static com.layer.sdk.messaging.MessagePart newInstance(java.lang.String plainText)","name":"newInstance","callSignature":"newInstance(plainText)","comment":"Creates a MessagePart with a string of text, encoded into a byte array in UTF-8 format.\n\nThis is a convenience accessor encapsulating the common operation of creating a message part\nwith a plain text data attachment in UTF-8 encoding. It is functionally equivalent to the\nfollowing example code:\n\nMessagePart(\"text\/plain\", text.getBytes(\"UTF-8\"));","returns":{"description":"A new message part with the MIME Type text\/plain and a UTF-8 encoded representation\nof the given input text.","type":"MessagePart"},"throws":[],"parameters":[{"name":"plainText","description":"The plain text body of the new message part.","type":"String"}],"exceptions":[]}],"instance":[{"declarationSignature":"public abstract java.lang.String getMimeType()","name":"getMimeType","callSignature":"getMimeType()","comment":"The MIME type of the content contained in the data portion of this MessagePart.","returns":{"description":"the MIME type of the content contained in the data portion of this MessagePart.","type":"String"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract byte[] getData()","name":"getData","callSignature":"getData()","comment":"The content of the MessagePart.","returns":{"description":"a byte array of data representing the payload of this MessagePart.","type":"byte"},"throws":[],"parameters":[],"exceptions":[]}]},"name":"MessagePart","comment":"The `MessagePart` class represents a piece of content embedded within a containing\nMessage. Each part has a specific MIME type identifying the type of content it contains.\nMessages may contain an arbitrary number of parts with any MIME type that the application\nwishes to support.","nestedClasses":[],"fullname":"com.layer.sdk.messaging.MessagePart","enumClasses":[],"fields":[],"derivedClasses":[{"name":"MessagePartImpl","comment":null,"fullname":"com.layer.sdk.internal.messaging.models.MessagePartImpl"}]},{"implementedInterfaces":[{"name":"LayerObject","comment":null,"fullname":"com.layer.sdk.LayerObject"}],"methods":{"constructor":[],"static":[{"declarationSignature":"public static com.layer.sdk.messaging.Message newInstance(com.layer.sdk.messaging.Conversation conversation, java.util.List messageParts)","name":"newInstance","callSignature":"newInstance(conversation, messageParts)","comment":"Constructs a new Message with the given Conversation and list of MessageParts.","returns":{"description":"A new Message ready to send.","type":"Message"},"throws":[],"parameters":[{"name":"conversation","description":"The Conversation that this Message is associated with.","type":"Conversation"},{"name":"messageParts","description":"A list of MessageParts to send with this Message.","type":"List"}],"exceptions":[]},{"declarationSignature":"public static com.layer.sdk.messaging.Message newInstance(com.layer.sdk.messaging.Conversation conversation, com.layer.sdk.messaging.MessagePart... messageParts)","name":"newInstance","callSignature":"newInstance(conversation, messageParts)","comment":null,"returns":{"type":"Message"},"throws":[],"parameters":[{"name":"conversation","type":"Conversation"},{"name":"messageParts","type":"MessagePart"}],"exceptions":[]}],"instance":[{"declarationSignature":"public abstract android.net.Uri getId()","name":"getId","callSignature":"getId()","comment":"A unique identifier for this Message.  The identifier can change between a locally-generated,\ntemporary value and a globally-generated, permanent value.  LayerChangeEventListeners can\nlisten for the \"id\" update to capture such identifier migrations, where the `oldValue` is the\ntemporary ID, and the `newValue` is the new, permanent ID.","returns":{"description":"a unique identifier for this Message.","type":"android.net.Uri"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract java.lang.Integer getIndex()","name":"getIndex","callSignature":"getIndex()","comment":"Returns the conversational order of this Message within its Conversation.  Prior to sending,\nthe return value will be Integer.MAX_VALUE.","returns":{"description":"the conversational order of this message, starting from 0 with the oldest message.","type":"Integer"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.messaging.Conversation getConversation()","name":"getConversation","callSignature":"getConversation()","comment":"Returns the Conversation that the Message is a part of.","returns":{"description":"the Conversation that the Message is a part of.","type":"Conversation"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract java.util.List getMessageParts()","name":"getMessageParts","callSignature":"getMessageParts()","comment":"Returns a list of message parts (modeled by the `MessagePart` class) that provide access to\nthe content of Message.","returns":{"description":"this Message's list of MessageParts.","type":"List"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract boolean isSent()","name":"isSent","callSignature":"isSent()","comment":"A message is considered `sent` after synchronization with the Layer Cloud..\n\nLayerChangeEventListeners can capture the `isSent` transition by listening for deletes.","returns":{"description":"`true` if this message has been deleted locally or remotely with deleteMessage().","type":"boolean"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract boolean isDeleted()","name":"isDeleted","callSignature":"isDeleted()","comment":"A message is considered `deleted` after LayerClient.deleteMessage() has been called on it.\n\nLayerChangeEventListeners can capture the `deleted` transition by listening for deletes.","returns":{"description":"`true` if this message has been deleted locally or remotely with deleteMessage().","type":"boolean"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract java.util.Date getSentAt()","name":"getSentAt","callSignature":"getSentAt()","comment":"The date and time that the message was originally sent.","returns":{"description":"the date and time that the message was originally sent.","type":"Date"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract java.util.Date getReceivedAt()","name":"getReceivedAt","callSignature":"getReceivedAt()","comment":"The date and time that the message was received by the authenticated user, or `null` if they\nare the sender.","returns":{"description":"the date and time that the message was received by the authenticated user, or `null`\nif they are the sender.","type":"Date"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract java.lang.String getSentByUserId()","name":"getSentByUserId","callSignature":"getSentByUserId()","comment":"Returns the user ID of the user who sent the message.","returns":{"description":"the user ID of the user who sent the message.","type":"String"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract java.util.Map getRecipientStatus()","name":"getRecipientStatus","callSignature":"getRecipientStatus()","comment":"Returns a dictionary keyed by the user ID of all participants in the conversation that the\nmessage is a part of, and whose values are `RecipientStatus` representations of each\nrecipient's status.\n\nLayerChangeEventListeners can capture recipient status transitions by listening for updates\non the \"receipt\" attribute.","returns":{"type":"Map"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public abstract com.layer.sdk.messaging.Message.RecipientStatus getRecipientStatus(java.lang.String userId)","name":"getRecipientStatus","callSignature":"getRecipientStatus(userId)","comment":"Retrieves the message state for a given participant in the conversation.\n\nLayerChangeEventListeners can capture recipient status transitions by listening for updates\non the \"receipt\" attribute.","returns":{"description":"A `MessageState` value specifying the message state for the given participant or\n`null` if the specified user is not a participant in the conversation.","type":"RecipientStatus"},"throws":[],"parameters":[{"name":"userId","description":"The user ID to retrieve the message state for.","type":"String"}],"exceptions":[]}]},"name":"Message","comment":"The `Message` class represents a message within a conversation (modeled by the `Conversation`\nclass) between two or more participants within Layer.","nestedClasses":[],"fullname":"com.layer.sdk.messaging.Message","enumClasses":[{"implementedInterfaces":[],"methods":{"constructor":[],"static":[],"instance":[]},"name":"RecipientStatus","comment":"`RecipientStatus` is an enumerated value declaring the lifecycle states for recipient status.","nestedClasses":[],"fullname":"com.layer.sdk.messaging.Message$RecipientStatus","enumClasses":[],"fields":[{"name":"PENDING","comment":null,"type":"RecipientStatus"},{"name":"SENT","comment":null,"type":"RecipientStatus"},{"name":"DELIVERED","comment":null,"type":"RecipientStatus"},{"name":"READ","comment":null,"type":"RecipientStatus"}],"derivedClasses":[]},{"implementedInterfaces":[],"methods":{"constructor":[{"declarationSignature":"ReservedMetadataKeys(java.lang.String key)","name":"ReservedMetadataKeys","callSignature":"ReservedMetadataKeys(key)","comment":null,"throws":[],"parameters":[{"name":"key","type":"String"}],"exceptions":[]}],"static":[],"instance":[{"declarationSignature":"public java.lang.String getKey()","name":"getKey","callSignature":"getKey()","comment":null,"returns":{"type":"String"},"throws":[],"parameters":[],"exceptions":[]},{"declarationSignature":"public java.lang.String toString()","name":"toString","callSignature":"toString()","comment":null,"returns":{"type":"String"},"throws":[],"parameters":[],"exceptions":[]}]},"name":"ReservedMetadataKeys","comment":null,"nestedClasses":[],"fullname":"com.layer.sdk.messaging.Message$ReservedMetadataKeys","enumClasses":[],"fields":[{"name":"PushNotificationAlertMessageKey","comment":null,"type":"ReservedMetadataKeys"},{"name":"PushNotificationSoundNameKey","comment":null,"type":"ReservedMetadataKeys"},{"name":"mKey","comment":null,"type":"String"}],"derivedClasses":[]}],"fields":[],"derivedClasses":[{"name":"MessageImpl","comment":null,"fullname":"com.layer.sdk.internal.messaging.models.MessageImpl"}]}],"name":"com.layer.sdk.messaging"}]}
